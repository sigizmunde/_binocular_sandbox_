{"version":3,"sources":["js/imageloader.js"],"names":["imgInput","document","getElementById","resizeImage","canvas","newCanvas","newWidth","canvasContext","getContext","newCanvasContext","imageData","getImageData","width","height","console","log","oldWidth","oldHeight","blockWidth","Math","floor","newHeight","newData","ImageData","data","i","j","averageColor","x","y","pixel","getPixelColors","component","round","putImageData","coordR","addEventListener","e","target","files","imageFile","reader","FileReader","readAsDataURL","onloadend","myImage","Image","src","result","onload","ev","virtualCanvas","createElement","virtualContext","drawImage"],"mappings":";AAAA,MAAMA,EAAWC,SAASC,eAAe,cA0BzC,SAASC,EAAYC,EAAQC,EAAWC,GAChCC,MAAAA,EAAgBH,EAAOI,WAAW,MAClCC,EAAmBJ,EAAUG,WAAW,MAExCE,EAAYH,EAAcI,aAAa,EAAG,EAAGP,EAAOQ,MAAOR,EAAOS,QACxEC,QAAQC,IAAI,eAAgBL,GACtBM,MAAAA,EAAWN,EAAUE,MACrBK,EAAYP,EAAUG,OACtBK,EAAaC,KAAKC,MAAMJ,EAAWV,IAAa,EAChDe,EAAYF,KAAKC,MAAMH,EAAYC,GACzCJ,QAAQC,IAAI,iBAAkBG,GAC9BJ,QAAQC,IAAI,oBAAqBT,EAAU,IAAKe,GAE1CC,MAAAA,EAAU,IAAIC,UAAUjB,EAAUe,IAClC,KAAEG,GAASF,EACZ,IAAA,IAAIG,EAAI,EAAGA,EAAInB,EAAUmB,GAAK,EAC5B,IAAA,IAAIC,EAAI,EAAGA,EAAIL,EAAWK,GAAK,EAAG,CAC/BC,MAAAA,EAAe,CAAC,EAAG,EAAG,EAAG,GAC1B,IAAA,IAAIC,EAAIH,EAAIP,EAAYU,GAAKH,EAAI,GAAKP,EAAYU,GAAK,EACrD,IAAA,IAAIC,EAAIH,EAAIR,EAAYW,GAAKH,EAAI,GAAKR,EAAYW,GAAK,EAAG,CACvDC,MAAAA,EAAQC,EAAeH,EAAGC,EAAGnB,GAE/BsB,IAAAA,EAAY,EACTA,KAAAA,EAAY,GACjBL,EAAaK,IAAcF,EAAME,GAAad,GAAc,EAC5Dc,GAAa,EAIfA,IAAAA,EAAY,EACTA,KAAAA,EAAY,GACjBR,EAAS,EAAJC,EAAQC,EAAIpB,EAAW,EAAI0B,GAAab,KAAKc,MAAMN,EAAaK,IACrEA,GAAa,EAKnBlB,QAAQC,IAAIO,GAEZjB,EAAUO,MAAQN,EAClBD,EAAUQ,OAASQ,EACnBZ,EAAiByB,aAAaZ,EAAS,EAAG,GAG5C,SAASS,EAAeH,EAAGC,EAAGnB,GACtByB,MAAAA,EAASN,GAAuB,EAAlBnB,EAAUE,OAAiB,EAAJgB,EAKpC,MAAA,CAJKlB,EAAUc,KAAKW,GACbzB,EAAUc,KAAKW,EAAS,GACzBzB,EAAUc,KAAKW,EAAS,GACvBzB,EAAUc,KAAKW,EAAS,IA1ExCnC,EAASoC,iBAAiB,SAAU,SAAUC,GACxCA,GAAAA,EAAEC,OAAOC,MAAO,CACdC,IAAAA,EAAYH,EAAEC,OAAOC,MAAM,GAC3BE,EAAS,IAAIC,WACjBD,EAAOE,cAAcH,GACrBC,EAAOG,UAAY,SAAUP,GACvBQ,IAAAA,EAAU,IAAIC,MAClBD,EAAQE,IAAMV,EAAEC,OAAOU,OACvBH,EAAQI,OAAS,SAAUC,GACrBC,IAAAA,EAAgBlD,SAASmD,cAAc,UACvCC,EAAiBF,EAAc3C,WAAW,MAC9C2C,EAAcvC,MAAQiC,EAAQjC,MAC9BuC,EAActC,OAASgC,EAAQhC,OAC/BwC,EAAeC,UAAUT,EAAS,EAAG,GAMrC1C,EAAYgD,EAHGlD,SAASC,eAAe,YAGF","file":"imageloader.3bf30db4.js","sourceRoot":"../src","sourcesContent":["const imgInput = document.getElementById('imageInput');\nimgInput.addEventListener('change', function (e) {\n  if (e.target.files) {\n    let imageFile = e.target.files[0]; //here we get the image file\n    let reader = new FileReader();\n    reader.readAsDataURL(imageFile);\n    reader.onloadend = function (e) {\n      let myImage = new Image(); // Creates image object\n      myImage.src = e.target.result; // Assigns converted image to image object\n      myImage.onload = function (ev) {\n        let virtualCanvas = document.createElement('canvas'); // Creates a canvas object\n        let virtualContext = virtualCanvas.getContext('2d'); // Creates a contect object\n        virtualCanvas.width = myImage.width; // Assigns image's width to canvas\n        virtualCanvas.height = myImage.height; // Assigns image's height to canvas\n        virtualContext.drawImage(myImage, 0, 0); // Draws the image on canvas\n        // let imgData = virtualCanvas.toDataURL('image/jpeg', 0.75); // Assigns image base64 string in jpeg format to a variable\n\n        let myCanvas = document.getElementById('myCanvas'); // Creates a canvas object\n        // let myContext = myCanvas.getContext('2d'); // Creates a contect object\n        // myContext.drawImage(newImage, 0, 0); // Draws the image on canvas\n        resizeImage(virtualCanvas, myCanvas, 20);\n      };\n    };\n  }\n});\n\nfunction resizeImage(canvas, newCanvas, newWidth) {\n  const canvasContext = canvas.getContext('2d');\n  const newCanvasContext = newCanvas.getContext('2d');\n  // 1. Count the amount of pixels in a block\n  const imageData = canvasContext.getImageData(0, 0, canvas.width, canvas.height);\n  console.log('imageData = ', imageData);\n  const oldWidth = imageData.width;\n  const oldHeight = imageData.height;\n  const blockWidth = Math.floor(oldWidth / newWidth) || 1;\n  const newHeight = Math.floor(oldHeight / blockWidth);\n  console.log('block width = ', blockWidth);\n  console.log('new dimensions = ', newWidth, 'x', newHeight);\n  // 2. Read block by coords\n  const newData = new ImageData(newWidth, newHeight);\n  const { data } = newData;\n  for (let i = 0; i < newWidth; i += 1) {\n    for (let j = 0; j < newHeight; j += 1) {\n      const averageColor = [0, 0, 0, 0];\n      for (let x = i * blockWidth; x < (i + 1) * blockWidth; x += 1) {\n        for (let y = j * blockWidth; y < (j + 1) * blockWidth; y += 1) {\n          const pixel = getPixelColors(x, y, imageData);\n          // 3. Count average color of block}\n          let component = 0;\n          while (component < 4) {\n            averageColor[component] += pixel[component] / blockWidth ** 2;\n            component += 1;\n          }\n        }\n      }\n      let component = 0;\n      while (component < 4) {\n        data[i * 4 + j * newWidth * 4 + component] = Math.round(averageColor[component]);\n        component += 1;\n      }\n    }\n  }\n\n  console.log(newData);\n  // 4. Draw image\n  newCanvas.width = newWidth;\n  newCanvas.height = newHeight;\n  newCanvasContext.putImageData(newData, 0, 0);\n}\n\nfunction getPixelColors(x, y, imageData) {\n  const coordR = y * (imageData.width * 4) + x * 4;\n  const red = imageData.data[coordR];\n  const green = imageData.data[coordR + 1];\n  const blue = imageData.data[coordR + 2];\n  const alpha = imageData.data[coordR + 3];\n  return [red, green, blue, alpha];\n}\n"]}