{"version":3,"sources":["js/imageloader.js"],"names":["imgInput","document","getElementById","resizeImage","canvas","newCanvas","newWidth","canvasContext","getContext","newCanvasContext","imageData","getImageData","width","height","console","log","oldWidth","oldHeight","blockWidth","Math","floor","newHeight","newData","ImageData","data","i","j","x","y","pixel","getPixelColors","component","putImageData","coordR","addEventListener","e","target","files","imageFile","reader","FileReader","readAsDataURL","onloadend","myImage","Image","src","result","onload","ev","virtualCanvas","createElement","virtualContext","drawImage","toDataURL","imgData","myCanvas"],"mappings":";AAAA,MAAMA,EAAWC,SAASC,eAAe,cA0BzC,SAASC,EAAYC,EAAQC,EAAWC,GAChCC,MAAAA,EAAgBH,EAAOI,WAAW,MAClCC,EAAmBJ,EAAUG,WAAW,MAExCE,EAAYH,EAAcI,aAAa,EAAG,EAAGP,EAAOQ,MAAOR,EAAOS,QACxEC,QAAQC,IAAI,eAAgBL,GACtBM,MAAAA,EAAWN,EAAUE,MACrBK,EAAYP,EAAUG,OACtBK,EAAaC,KAAKC,MAAMJ,EAAWV,IAAa,EAChDe,EAAYF,KAAKC,MAAMH,EAAYC,GACzCJ,QAAQC,IAAI,iBAAkBG,GAC9BJ,QAAQC,IAAI,oBAAqBT,EAAU,IAAKe,GAE1CC,MAAAA,EAAU,IAAIC,UAAUjB,EAAUe,GAClCG,EAAOF,EAAQE,KAChB,IAAA,IAAIC,EAAI,EAAGA,EAAInB,EAAUmB,GAAK,EAC5B,IAAA,IAAIC,EAAI,EAAGA,EAAIL,EAAWK,GAAK,EAC7B,IAAA,IAAIC,EAAIF,EAAIP,EAAYS,EAAIF,EAAIP,EAAaA,EAAYS,GAAK,EAC5D,IAAA,IAAIC,EAAIF,EAAIR,EAAYU,EAAIF,EAAIR,EAAaA,EAAYU,GAAK,EAAG,CAC9DC,MAAAA,EAAQC,EAAeH,EAAGC,EAAGlB,GAE/BqB,IAAAA,EAAY,EACTA,KAAAA,EAAY,GAIjBP,EAAKC,EAAIC,EAAIpB,EAAWyB,GAAaF,EAAME,GAC3CA,GAAa,EAMvBjB,QAAQC,IAAIO,GAGZjB,EAAUO,MAAQN,EAClBD,EAAUQ,OAASQ,EACnBZ,EAAiBuB,aAAaV,EAAS,EAAG,GAG5C,SAASQ,EAAeH,EAAGC,EAAGlB,GACtBuB,MAAAA,EAASL,GAAuB,EAAlBlB,EAAUE,OAAiB,EAAJe,EAKpC,MAAA,CAJKjB,EAAUc,KAAKS,GACbvB,EAAUc,KAAKS,EAAS,GACzBvB,EAAUc,KAAKS,EAAS,GACvBvB,EAAUc,KAAKS,EAAS,IAvExCjC,EAASkC,iBAAiB,SAAU,SAAUC,GACxCA,GAAAA,EAAEC,OAAOC,MAAO,CACdC,IAAAA,EAAYH,EAAEC,OAAOC,MAAM,GAC3BE,EAAS,IAAIC,WACjBD,EAAOE,cAAcH,GACrBC,EAAOG,UAAY,SAAUP,GACvBQ,IAAAA,EAAU,IAAIC,MAClBD,EAAQE,IAAMV,EAAEC,OAAOU,OACvBH,EAAQI,OAAS,SAAUC,GACrBC,IAAAA,EAAgBhD,SAASiD,cAAc,UACvCC,EAAiBF,EAAczC,WAAW,MAC9CyC,EAAcrC,MAAQ+B,EAAQ/B,MAC9BqC,EAAcpC,OAAS8B,EAAQ9B,OAC/BsC,EAAeC,UAAUT,EAAS,EAAG,GACvBM,EAAcI,UAAU,aAAc,KAAhDC,IAEAC,EAAWtD,SAASC,eAAe,YACvBqD,EAAS/C,WAAW,MAEpCL,EAAY8C,EAAeM,EAAU","file":"imageloader.73552874.js","sourceRoot":"../src","sourcesContent":["const imgInput = document.getElementById('imageInput');\nimgInput.addEventListener('change', function (e) {\n  if (e.target.files) {\n    let imageFile = e.target.files[0]; //here we get the image file\n    let reader = new FileReader();\n    reader.readAsDataURL(imageFile);\n    reader.onloadend = function (e) {\n      let myImage = new Image(); // Creates image object\n      myImage.src = e.target.result; // Assigns converted image to image object\n      myImage.onload = function (ev) {\n        let virtualCanvas = document.createElement('canvas'); // Creates a canvas object\n        let virtualContext = virtualCanvas.getContext('2d'); // Creates a contect object\n        virtualCanvas.width = myImage.width; // Assigns image's width to canvas\n        virtualCanvas.height = myImage.height; // Assigns image's height to canvas\n        virtualContext.drawImage(myImage, 0, 0); // Draws the image on canvas\n        let imgData = virtualCanvas.toDataURL('image/jpeg', 0.75); // Assigns image base64 string in jpeg format to a variable\n\n        let myCanvas = document.getElementById('myCanvas'); // Creates a canvas object\n        let myContext = myCanvas.getContext('2d'); // Creates a contect object\n        // myContext.drawImage(newImage, 0, 0); // Draws the image on canvas\n        resizeImage(virtualCanvas, myCanvas, 500);\n      };\n    };\n  }\n});\n\nfunction resizeImage(canvas, newCanvas, newWidth) {\n  const canvasContext = canvas.getContext('2d');\n  const newCanvasContext = newCanvas.getContext('2d');\n  // 1. Count the amount of pixels in a block\n  const imageData = canvasContext.getImageData(0, 0, canvas.width, canvas.height);\n  console.log('imageData = ', imageData);\n  const oldWidth = imageData.width;\n  const oldHeight = imageData.height;\n  const blockWidth = Math.floor(oldWidth / newWidth) || 1;\n  const newHeight = Math.floor(oldHeight / blockWidth);\n  console.log('block width = ', blockWidth);\n  console.log('new dimensions = ', newWidth, 'x', newHeight);\n  // 2. Read block by coords\n  const newData = new ImageData(newWidth, newHeight);\n  const data = newData.data;\n  for (let i = 0; i < newWidth; i += 1) {\n    for (let j = 0; j < newHeight; j += 1) {\n      for (let x = i * blockWidth; x < i * blockWidth + blockWidth; x += 1) {\n        for (let y = j * blockWidth; y < j * blockWidth + blockWidth; y += 1) {\n          const pixel = getPixelColors(x, y, imageData);\n          // 3. Count average color of block}\n          let component = 0;\n          while (component < 4) {\n            // data[i + j * newWidth + component] += Math.floor(\n            //   pixel[component] / (blockWidth * blockWidth),\n            // );\n            data[i + j * newWidth + component] = pixel[component];\n            component += 1;\n          }\n        }\n      }\n    }\n  }\n  console.log(newData);\n  // 4. Write blocks of fixed size in a new image\n  // 5. Return image\n  newCanvas.width = newWidth;\n  newCanvas.height = newHeight;\n  newCanvasContext.putImageData(newData, 0, 0);\n}\n\nfunction getPixelColors(x, y, imageData) {\n  const coordR = y * (imageData.width * 4) + x * 4;\n  const red = imageData.data[coordR];\n  const green = imageData.data[coordR + 1];\n  const blue = imageData.data[coordR + 2];\n  const alpha = imageData.data[coordR + 3];\n  return [red, green, blue, alpha];\n}\n"]}